811ef04625ed15e942b008347b7ca337
const tbl_chats = require('../models/tbl_chats');

const tbl_chat_user = require('../models/tbl_chat_user');

const tbl_users = require('../models/tbl_users');

const getCatch = require('../utils/getCatch');

module.exports = {
  registerChat: async (req, res) => {
    const {
      title
    } = req.body;
    const chat = await tbl_chats.create({
      title
    }).catch(err => getCatch(err));
    return res.json(chat);
  },
  listChats: async (req, res) => {
    const chats = await tbl_chats.findAll({
      raw: true
    }).catch(err => getCatch(err));
    return res.json(chats);
  },
  insertUsers: async (req, res) => {
    const {
      id_users,
      id_chat
    } = req.body;
    const response = {};
    response.insertion = [];

    for (id_user in id_users) {
      response.insertion[id_user] = await tbl_chat_user.create({
        fk_id_user: id_users[id_user],
        fk_id_chat: id_chat
      }).catch(err => getCatch(err));
    }

    return res.json(response.insertion);
  },
  listChatUsers: async (req, res) => {
    const id = req.params.id;
    const chat_users = await tbl_chat_user.findAll({
      where: {
        fk_id_chat: id
      },
      raw: true
    }).catch(err => getCatch(err));
    if (chat_users === 0) return res.json(chat_users);
    const users = [];

    for (chat_user of chat_users) {
      const user = await tbl_users.findOne({
        where: {
          id_user: chat_user.fk_id_user
        }
      }).catch(err => getCatch(err));
      if (user !== 0) users.push(user);
    }

    return res.json(users);
  },
  deleteChat: async (req, res) => {
    const id = req.params.id;
    const response = await tbl_chats.destroy({
      where: {
        id_chat: id
      }
    }).catch(err => getCatch(err));
    return res.json(response);
  },
  deleteChatUsers: async (req, res) => {
    const {
      id_users,
      id_chat
    } = req.body;
    const response = {};
    response.remove = [];

    for (id_user in id_users) {
      response.remove[id_user] = await tbl_chat_user.destroy({
        where: {
          fk_id_user: id_users[id_user],
          fk_id_chat: id_chat
        }
      }).catch(err => getCatch(err));
    }

    return res.json(response.remove);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoYXRDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbInRibF9jaGF0cyIsInJlcXVpcmUiLCJ0YmxfY2hhdF91c2VyIiwidGJsX3VzZXJzIiwiZ2V0Q2F0Y2giLCJtb2R1bGUiLCJleHBvcnRzIiwicmVnaXN0ZXJDaGF0IiwicmVxIiwicmVzIiwidGl0bGUiLCJib2R5IiwiY2hhdCIsImNyZWF0ZSIsImNhdGNoIiwiZXJyIiwianNvbiIsImxpc3RDaGF0cyIsImNoYXRzIiwiZmluZEFsbCIsInJhdyIsImluc2VydFVzZXJzIiwiaWRfdXNlcnMiLCJpZF9jaGF0IiwicmVzcG9uc2UiLCJpbnNlcnRpb24iLCJpZF91c2VyIiwiZmtfaWRfdXNlciIsImZrX2lkX2NoYXQiLCJsaXN0Q2hhdFVzZXJzIiwiaWQiLCJwYXJhbXMiLCJjaGF0X3VzZXJzIiwid2hlcmUiLCJ1c2VycyIsImNoYXRfdXNlciIsInVzZXIiLCJmaW5kT25lIiwicHVzaCIsImRlbGV0ZUNoYXQiLCJkZXN0cm95IiwiZGVsZXRlQ2hhdFVzZXJzIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxxQkFBRCxDQUF6Qjs7QUFDQSxNQUFNQyxhQUFhLEdBQUdELE9BQU8sQ0FBQyx5QkFBRCxDQUE3Qjs7QUFDQSxNQUFNRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxxQkFBRCxDQUF6Qjs7QUFDQSxNQUFNRyxRQUFRLEdBQUdILE9BQU8sQ0FBQyxtQkFBRCxDQUF4Qjs7QUFFQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JDLEVBQUFBLFlBQVksRUFBRSxPQUFNQyxHQUFOLEVBQVdDLEdBQVgsS0FBbUI7QUFDN0IsVUFBTTtBQUFFQyxNQUFBQTtBQUFGLFFBQVlGLEdBQUcsQ0FBQ0csSUFBdEI7QUFDQSxVQUFNQyxJQUFJLEdBQUcsTUFBTVosU0FBUyxDQUFDYSxNQUFWLENBQWlCO0FBQUNILE1BQUFBO0FBQUQsS0FBakIsRUFDbEJJLEtBRGtCLENBQ1pD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O0FBQVAsS0FBbEIsRUFDdEJoQixLQURzQixDQUNoQkMsR0FBRyxJQUFJWCxRQUFRLENBQUNXLEdBQUQsQ0FEQyxDQUF2QjtBQUVBLFdBQU9OLEdBQUcsQ0FBQ08sSUFBSixDQUFTUSxRQUFULENBQVA7QUFDSCxHQTFDWTtBQTJDYmlCLEVBQUFBLGVBQWUsRUFBRSxPQUFNakMsR0FBTixFQUFXQyxHQUFYLEtBQW1CO0FBQ2hDLFVBQU07QUFBQ2EsTUFBQUEsUUFBRDtBQUFXQyxNQUFBQTtBQUFYLFFBQXNCZixHQUFHLENBQUNHLElBQWhDO0FBQ0EsVUFBTWEsUUFBUSxHQUFHLEVBQWpCO0FBQ0FBLElBQUFBLFFBQVEsQ0FBQ2tCLE1BQVQsR0FBa0IsRUFBbEI7O0FBQ0EsU0FBS2hCLE9BQUwsSUFBZ0JKLFFBQWhCLEVBQTBCO0FBQ3RCRSxNQUFBQSxRQUFRLENBQUNrQixNQUFULENBQWdCaEIsT0FBaEIsSUFBMkIsTUFBTXhCLGFBQWEsQ0FBQ3NDLE9BQWQsQ0FBc0I7QUFBQ1AsUUFBQUEsS0FBSyxFQUFDO0FBQzFETixVQUFBQSxVQUFVLEVBQUdMLFFBQVEsQ0FBQ0ksT0FBRCxDQURxQztBQUUxREUsVUFBQUEsVUFBVSxFQUFHTDtBQUY2QztBQUFQLE9BQXRCLEVBSWhDVCxLQUpnQyxDQUkxQkMsR0FBRyxJQUFJWCxRQUFRLENBQUNXLEdBQUQsQ0FKVyxDQUFqQztBQUtIOztBQUNELFdBQU9OLEdBQUcsQ0FBQ08sSUFBSixDQUFTUSxRQUFRLENBQUNrQixNQUFsQixDQUFQO0FBQ0g7QUF2RFksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YmxfY2hhdHMgPSByZXF1aXJlKCcuLi9tb2RlbHMvdGJsX2NoYXRzJylcclxuY29uc3QgdGJsX2NoYXRfdXNlciA9IHJlcXVpcmUoJy4uL21vZGVscy90YmxfY2hhdF91c2VyJylcclxuY29uc3QgdGJsX3VzZXJzID0gcmVxdWlyZSgnLi4vbW9kZWxzL3RibF91c2VycycpXHJcbmNvbnN0IGdldENhdGNoID0gcmVxdWlyZSgnLi4vdXRpbHMvZ2V0Q2F0Y2gnKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICByZWdpc3RlckNoYXQ6IGFzeW5jKHJlcSwgcmVzKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyB0aXRsZSB9ID0gcmVxLmJvZHlcclxuICAgICAgICBjb25zdCBjaGF0ID0gYXdhaXQgdGJsX2NoYXRzLmNyZWF0ZSh7dGl0bGV9KVxyXG4gICAgICAgIC5jYXRjaChlcnIgPT4gZ2V0Q2F0Y2goZXJyKSlcclxuICAgICAgICByZXR1cm4gcmVzLmpzb24oY2hhdClcclxuICAgIH0sXHJcbiAgICBsaXN0Q2hhdHM6IGFzeW5jKHJlcSwgcmVzKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2hhdHMgPSBhd2FpdCB0YmxfY2hhdHMuZmluZEFsbCh7cmF3OiB0cnVlfSlcclxuICAgICAgICAuY2F0Y2goZXJyID0+IGdldENhdGNoKGVycikpXHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKGNoYXRzKVxyXG4gICAgfSxcclxuICAgIGluc2VydFVzZXJzOiBhc3luYyhyZXEsIHJlcykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHtpZF91c2VycywgaWRfY2hhdH0gPSByZXEuYm9keVxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0ge31cclxuICAgICAgICByZXNwb25zZS5pbnNlcnRpb24gPSBbXVxyXG4gICAgICAgIGZvcihpZF91c2VyIGluIGlkX3VzZXJzKXtcclxuICAgICAgICAgICAgcmVzcG9uc2UuaW5zZXJ0aW9uW2lkX3VzZXJdID0gYXdhaXQgdGJsX2NoYXRfdXNlci5jcmVhdGUoe1xyXG4gICAgICAgICAgICAgICAgZmtfaWRfdXNlcjogaWRfdXNlcnNbaWRfdXNlcl0sXHJcbiAgICAgICAgICAgICAgICBma19pZF9jaGF0OiBpZF9jaGF0XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiBnZXRDYXRjaChlcnIpKVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzLmpzb24ocmVzcG9uc2UuaW5zZXJ0aW9uKVxyXG4gICAgfSxcclxuICAgIGxpc3RDaGF0VXNlcnM6IGFzeW5jKHJlcSwgcmVzKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaWQgPSByZXEucGFyYW1zLmlkXHJcbiAgICAgICAgY29uc3QgY2hhdF91c2VycyA9IGF3YWl0IHRibF9jaGF0X3VzZXIuZmluZEFsbCh7d2hlcmU6e2ZrX2lkX2NoYXQgOiBpZH0sIHJhdzogdHJ1ZX0pXHJcbiAgICAgICAgLmNhdGNoKGVyciA9PiBnZXRDYXRjaChlcnIpKVxyXG4gICAgICAgIGlmKGNoYXRfdXNlcnMgPT09IDApIHJldHVybiByZXMuanNvbihjaGF0X3VzZXJzKVxyXG4gICAgICAgIGNvbnN0IHVzZXJzID0gW11cclxuICAgICAgICBmb3IoY2hhdF91c2VyIG9mIGNoYXRfdXNlcnMpe1xyXG4gICAgICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgdGJsX3VzZXJzLmZpbmRPbmUoe3doZXJlOiB7aWRfdXNlcjogY2hhdF91c2VyLmZrX2lkX3VzZXJ9fSlcclxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBnZXRDYXRjaChlcnIpKVxyXG4gICAgICAgICAgICBpZiAodXNlciAhPT0gMCkgdXNlcnMucHVzaCh1c2VyKSBcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHVzZXJzKVxyXG4gICAgfSxcclxuICAgIGRlbGV0ZUNoYXQ6IGFzeW5jKHJlcSwgcmVzKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaWQgPSByZXEucGFyYW1zLmlkXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0YmxfY2hhdHMuZGVzdHJveSh7d2hlcmU6e2lkX2NoYXQgOiBpZH19KVxyXG4gICAgICAgIC5jYXRjaChlcnIgPT4gZ2V0Q2F0Y2goZXJyKSlcclxuICAgICAgICByZXR1cm4gcmVzLmpzb24ocmVzcG9uc2UpXHJcbiAgICB9LFxyXG4gICAgZGVsZXRlQ2hhdFVzZXJzOiBhc3luYyhyZXEsIHJlcykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHtpZF91c2VycywgaWRfY2hhdH0gPSByZXEuYm9keVxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0ge31cclxuICAgICAgICByZXNwb25zZS5yZW1vdmUgPSBbXVxyXG4gICAgICAgIGZvciAoaWRfdXNlciBpbiBpZF91c2Vycykge1xyXG4gICAgICAgICAgICByZXNwb25zZS5yZW1vdmVbaWRfdXNlcl0gPSBhd2FpdCB0YmxfY2hhdF91c2VyLmRlc3Ryb3koe3doZXJlOntcclxuICAgICAgICAgICAgICAgIGZrX2lkX3VzZXIgOiBpZF91c2Vyc1tpZF91c2VyXSxcclxuICAgICAgICAgICAgICAgIGZrX2lkX2NoYXQgOiBpZF9jaGF0XHJcbiAgICAgICAgICAgIH19KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IGdldENhdGNoKGVycikpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXMuanNvbihyZXNwb25zZS5yZW1vdmUpXHJcbiAgICB9XHJcbn0iXX0=