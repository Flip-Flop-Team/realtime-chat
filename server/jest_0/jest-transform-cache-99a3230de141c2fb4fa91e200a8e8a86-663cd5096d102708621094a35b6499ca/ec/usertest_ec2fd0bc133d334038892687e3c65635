acd11d17539c2a804be866f2aa8aab02
const apiCalls = require('../utils/apiCalls');

const truncate = require('../utils/truncate');

describe("CRUD User", () => {
  beforeEach(async () => {
    await truncate();
  }); //### REGISTER USER ###

  it("should create user", async () => {
    const user = await apiCalls.registerUser('Paulo', 'paulo@mesquita.dev', '123123');
    expect(user.body.email).toBe("paulo@mesquita.dev");
  });
  it("should report out of password problem", async () => {
    const user = await apiCalls.registerUser('Paulo', 'paulo@mesquita.dev');
    expect(user.body).toBe("tbl_users.password cannot be null");
  });
  it("should report email already exists", async () => {
    await apiCalls.registerUser('Paulo', 'paulo@mesquita.dev', '123123');
    const user2 = await apiCalls.registerUser('PauloV', 'paulo@mesquita.dev', '123123');
    expect(user2.body).toBe("email must be unique");
  });
  it("should report username already exists", async () => {
    await apiCalls.registerUser('Paulo', 'paulo@mesquita.dev', '123123');
    const user = await apiCalls.registerUser('Paulo', 'paulo@mesquita.devs', '123123');
    expect(user.body).toBe("username must be unique");
  }); //### LIST USERS ###

  it("should list users registered in the db", async () => {
    const user1 = await apiCalls.registerUser('Paulo', 'paulo@mesquita.dev', '123123');
    const user2 = await apiCalls.registerUser('Paulo V', 'paulo@mesquita.devs', '123123');
    const list = await apiCalls.listUsers();
    user1.body.updatedAt = list.body[0].updatedAt;
    user2.body.updatedAt = list.body[1].updatedAt;
    user1.body.createdAt = list.body[0].createdAt;
    user2.body.createdAt = list.body[1].createdAt;
    expect(list.body).toStrictEqual([user1.body, user2.body]);
  }); //### GET USER ###

  it("should get user registered in db", async () => {
    const userRegistered = await apiCalls.registerUser('Paulo', 'paulo@mesquita.dev', '123123');
    const user = await apiCalls.getUser(userRegistered.body.id_user);
    delete user.body.createdAt;
    delete user.body.updatedAt;
    expect(user.body).toStrictEqual({
      username: 'Paulo',
      email: 'paulo@mesquita.dev',
      password: '123123',
      id_user: userRegistered.body.id_user
    });
  });
  it("should report error not found with that id", async () => {
    const user = await apiCalls.getUser(1);
    expect(user.body).toBe(null);
  }); //### DELETE USER ###

  it("should not be in db after deleted", async () => {});
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXIudGVzdC5qcyJdLCJuYW1lcyI6WyJhcGlDYWxscyIsInJlcXVpcmUiLCJ0cnVuY2F0ZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsIml0IiwidXNlciIsInJlZ2lzdGVyVXNlciIsImV4cGVjdCIsImJvZHkiLCJlbWFpbCIsInRvQmUiLCJ1c2VyMiIsInVzZXIxIiwibGlzdCIsImxpc3RVc2VycyIsInVwZGF0ZWRBdCIsImNyZWF0ZWRBdCIsInRvU3RyaWN0RXF1YWwiLCJ1c2VyUmVnaXN0ZXJlZCIsImdldFVzZXIiLCJpZF91c2VyIiwidXNlcm5hbWUiLCJwYXNzd29yZCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsbUJBQUQsQ0FBeEI7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsbUJBQUQsQ0FBeEI7O0FBRUFFLFFBQVEsQ0FBQyxXQUFELEVBQWMsTUFBTTtBQUN4QkMsRUFBQUEsVUFBVSxDQUFDLFlBQVk7QUFDbkIsVUFBTUYsUUFBUSxFQUFkO0FBQ0gsR0FGUyxDQUFWLENBRHdCLENBS3hCOztBQUNBRyxFQUFBQSxFQUFFLENBQUMsb0JBQUQsRUFBdUIsWUFBWTtBQUNqQyxVQUFNQyxJQUFJLEdBQUcsTUFBTU4sUUFBUSxDQUFDTyxZQUFULENBQXNCLE9BQXRCLEVBQStCLG9CQUEvQixFQUFxRCxRQUFyRCxDQUFuQjtBQUNBQyxJQUFBQSxNQUFNLENBQUNGLElBQUksQ0FBQ0csSUFBTCxDQUFVQyxLQUFYLENBQU4sQ0FBd0JDLElBQXhCLENBQTZCLG9CQUE3QjtBQUNILEdBSEMsQ0FBRjtBQUtBTixFQUFBQSxFQUFFLENBQUMsdUNBQUQsRUFBMEMsWUFBWTtBQUNwRCxVQUFNQyxJQUFJLEdBQUcsTUFBTU4sUUFBUSxDQUFDTyxZQUFULENBQXNCLE9BQXRCLEVBQStCLG9CQUEvQixDQUFuQjtBQUNBQyxJQUFBQSxNQUFNLENBQUNGLElBQUksQ0FBQ0csSUFBTixDQUFOLENBQWtCRSxJQUFs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QUFPLEVBQUVGLGNBQWMsQ0FBQ1YsSUFBZixDQUFvQlk7QUFEckUsS0FBaEM7QUFHSCxHQVJDLENBQUY7QUFVQWhCLEVBQUFBLEVBQUUsQ0FBQyw0Q0FBRCxFQUErQyxZQUFXO0FBQ3hELFVBQU1DLElBQUksR0FBRyxNQUFNTixRQUFRLENBQUNvQixPQUFULENBQWlCLENBQWpCLENBQW5CO0FBQ0FaLElBQUFBLE1BQU0sQ0FBQ0YsSUFBSSxDQUFDRyxJQUFOLENBQU4sQ0FBa0JFLElBQWxCLENBQXVCLElBQXZCO0FBQ0gsR0FIQyxDQUFGLENBbkR3QixDQXVEeEI7O0FBQ0FOLEVBQUFBLEVBQUUsQ0FBQyxtQ0FBRCxFQUFzQyxZQUFXLENBRWxELENBRkMsQ0FBRjtBQUdILENBM0RPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhcGlDYWxscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2FwaUNhbGxzJylcclxuY29uc3QgdHJ1bmNhdGUgPSByZXF1aXJlKCcuLi91dGlscy90cnVuY2F0ZScpXHJcblxyXG5kZXNjcmliZShcIkNSVUQgVXNlclwiLCAoKSA9PiB7XHJcbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcclxuICAgICAgICBhd2FpdCB0cnVuY2F0ZSgpXHJcbiAgICB9KVxyXG5cclxuICAgIC8vIyMjIFJFR0lTVEVSIFVTRVIgIyMjXHJcbiAgICBpdChcInNob3VsZCBjcmVhdGUgdXNlclwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IGFwaUNhbGxzLnJlZ2lzdGVyVXNlcignUGF1bG8nLCAncGF1bG9AbWVzcXVpdGEuZGV2JywgJzEyMzEyMycpXHJcbiAgICAgICAgZXhwZWN0KHVzZXIuYm9keS5lbWFpbCkudG9CZShcInBhdWxvQG1lc3F1aXRhLmRldlwiKVxyXG4gICAgfSlcclxuXHJcbiAgICBpdChcInNob3VsZCByZXBvcnQgb3V0IG9mIHBhc3N3b3JkIHByb2JsZW1cIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBhcGlDYWxscy5yZWdpc3RlclVzZXIoJ1BhdWxvJywgJ3BhdWxvQG1lc3F1aXRhLmRldicpXHJcbiAgICAgICAgZXhwZWN0KHVzZXIuYm9keSkudG9CZShcInRibF91c2Vycy5wYXNzd29yZCBjYW5ub3QgYmUgbnVsbFwiKVxyXG4gICAgfSlcclxuXHJcbiAgICBpdChcInNob3VsZCByZXBvcnQgZW1haWwgYWxyZWFkeSBleGlzdHNcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IGFwaUNhbGxzLnJlZ2lzdGVyVXNlcignUGF1bG8nLCAncGF1bG9AbWVzcXVpdGEuZGV2JywgJzEyMzEyMycpXHJcbiAgICAgICAgY29uc3QgdXNlcjIgPSBhd2FpdCBhcGlDYWxscy5yZWdpc3RlclVzZXIoJ1BhdWxvVicsICdwYXVsb0BtZXNxdWl0YS5kZXYnLCAnMTIzMTIzJylcclxuICAgICAgICBleHBlY3QodXNlcjIuYm9keSkudG9CZShcImVtYWlsIG11c3QgYmUgdW5pcXVlXCIpXHJcbiAgICB9KVxyXG5cclxuICAgIGl0KFwic2hvdWxkIHJlcG9ydCB1c2VybmFtZSBhbHJlYWR5IGV4aXN0c1wiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgYXdhaXQgYXBpQ2FsbHMucmVnaXN0ZXJVc2VyKCdQYXVsbycsICdwYXVsb0BtZXNxdWl0YS5kZXYnLCAnMTIzMTIzJylcclxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgYXBpQ2FsbHMucmVnaXN0ZXJVc2VyKCdQYXVsbycsICdwYXVsb0BtZXNxdWl0YS5kZXZzJywgJzEyMzEyMycpXHJcbiAgICAgICAgZXhwZWN0KHVzZXIuYm9keSkudG9CZShcInVzZXJuYW1lIG11c3QgYmUgdW5pcXVlXCIpXHJcbiAgICB9KVxyXG5cclxuICAgIC8vIyMjIExJU1QgVVNFUlMgIyMjXHJcbiAgICBpdChcInNob3VsZCBsaXN0IHVzZXJzIHJlZ2lzdGVyZWQgaW4gdGhlIGRiXCIsIGFzeW5jKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVzZXIxID0gYXdhaXQgYXBpQ2FsbHMucmVnaXN0ZXJVc2VyKCdQYXVsbycsICdwYXVsb0BtZXNxdWl0YS5kZXYnLCAnMTIzMTIzJylcclxuICAgICAgICBjb25zdCB1c2VyMiA9IGF3YWl0IGFwaUNhbGxzLnJlZ2lzdGVyVXNlcignUGF1bG8gVicsICdwYXVsb0BtZXNxdWl0YS5kZXZzJywgJzEyMzEyMycpXHJcbiAgICAgICAgY29uc3QgbGlzdCA9IGF3YWl0IGFwaUNhbGxzLmxpc3RVc2VycygpXHJcbiAgICAgICAgdXNlcjEuYm9keS51cGRhdGVkQXQgPSBsaXN0LmJvZHlbMF0udXBkYXRlZEF0XHJcbiAgICAgICAgdXNlcjIuYm9keS51cGRhdGVkQXQgPSBsaXN0LmJvZHlbMV0udXBkYXRlZEF0XHJcbiAgICAgICAgdXNlcjEuYm9keS5jcmVhdGVkQXQgPSBsaXN0LmJvZHlbMF0uY3JlYXRlZEF0XHJcbiAgICAgICAgdXNlcjIuYm9keS5jcmVhdGVkQXQgPSBsaXN0LmJvZHlbMV0uY3JlYXRlZEF0XHJcbiAgICAgICAgZXhwZWN0KGxpc3QuYm9keSkudG9TdHJpY3RFcXVhbChbdXNlcjEuYm9keSwgdXNlcjIuYm9keV0pXHJcbiAgICB9KVxyXG5cclxuICAgIC8vIyMjIEdFVCBVU0VSICMjI1xyXG4gICAgaXQoXCJzaG91bGQgZ2V0IHVzZXIgcmVnaXN0ZXJlZCBpbiBkYlwiLCBhc3luYygpID0+IHtcclxuICAgICAgICBjb25zdCB1c2VyUmVnaXN0ZXJlZCA9IGF3YWl0IGFwaUNhbGxzLnJlZ2lzdGVyVXNlcignUGF1bG8nLCAncGF1bG9AbWVzcXVpdGEuZGV2JywgJzEyMzEyMycpXHJcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IGFwaUNhbGxzLmdldFVzZXIodXNlclJlZ2lzdGVyZWQuYm9keS5pZF91c2VyKVxyXG4gICAgICAgIGRlbGV0ZSB1c2VyLmJvZHkuY3JlYXRlZEF0XHJcbiAgICAgICAgZGVsZXRlIHVzZXIuYm9keS51cGRhdGVkQXRcclxuICAgICAgICBleHBlY3QodXNlci5ib2R5KS50b1N0cmljdEVxdWFsKHtcclxuICAgICAgICAgICAgdXNlcm5hbWU6ICdQYXVsbycsIGVtYWlsOiAncGF1bG9AbWVzcXVpdGEuZGV2JywgcGFzc3dvcmQ6ICcxMjMxMjMnLCBpZF91c2VyOiB1c2VyUmVnaXN0ZXJlZC5ib2R5LmlkX3VzZXJcclxuICAgICAgICB9KVxyXG4gICAgfSlcclxuXHJcbiAgICBpdChcInNob3VsZCByZXBvcnQgZXJyb3Igbm90IGZvdW5kIHdpdGggdGhhdCBpZFwiLCBhc3luYygpID0+IHtcclxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgYXBpQ2FsbHMuZ2V0VXNlcigxKVxyXG4gICAgICAgIGV4cGVjdCh1c2VyLmJvZHkpLnRvQmUobnVsbClcclxuICAgIH0pXHJcbiAgICAvLyMjIyBERUxFVEUgVVNFUiAjIyNcclxuICAgIGl0KFwic2hvdWxkIG5vdCBiZSBpbiBkYiBhZnRlciBkZWxldGVkXCIsIGFzeW5jKCkgPT4ge1xyXG5cclxuICAgIH0pXHJcbn0pIl19