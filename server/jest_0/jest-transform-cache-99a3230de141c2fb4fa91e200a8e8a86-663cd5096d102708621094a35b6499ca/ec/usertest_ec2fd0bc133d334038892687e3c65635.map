{"version":3,"sources":["user.test.js"],"names":["apiCalls","require","truncate","describe","beforeEach","it","user","registerUser","expect","body","email","toBe","user2","user1","list","listUsers","updatedAt","createdAt","toStrictEqual","userRegistered","getUser","id_user","username","password"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAxB;;AAEAE,QAAQ,CAAC,WAAD,EAAc,MAAM;AACxBC,EAAAA,UAAU,CAAC,YAAY;AACnB,UAAMF,QAAQ,EAAd;AACH,GAFS,CAAV,CADwB,CAKxB;;AACAG,EAAAA,EAAE,CAAC,oBAAD,EAAuB,YAAY;AACjC,UAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,YAAT,CAAsB,OAAtB,EAA+B,oBAA/B,EAAqD,QAArD,CAAnB;AACAC,IAAAA,MAAM,CAACF,IAAI,CAACG,IAAL,CAAUC,KAAX,CAAN,CAAwBC,IAAxB,CAA6B,oBAA7B;AACH,GAHC,CAAF;AAKAN,EAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAY;AACpD,UAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,YAAT,CAAsB,OAAtB,EAA+B,oBAA/B,CAAnB;AACAC,IAAAA,MAAM,CAACF,IAAI,CAACG,IAAN,CAAN,CAAkBE,IAAlB,CAAuB,mCAAvB;AACH,GAHC,CAAF;AAKAN,EAAAA,EAAE,CAAC,oCAAD,EAAuC,YAAY;AACjD,UAAML,QAAQ,CAACO,YAAT,CAAsB,OAAtB,EAA+B,oBAA/B,EAAqD,QAArD,CAAN;AACA,UAAMK,KAAK,GAAG,MAAMZ,QAAQ,CAACO,YAAT,CAAsB,QAAtB,EAAgC,oBAAhC,EAAsD,QAAtD,CAApB;AACAC,IAAAA,MAAM,CAACI,KAAK,CAACH,IAAP,CAAN,CAAmBE,IAAnB,CAAwB,sBAAxB;AACH,GAJC,CAAF;AAMAN,EAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAY;AACpD,UAAML,QAAQ,CAACO,YAAT,CAAsB,OAAtB,EAA+B,oBAA/B,EAAqD,QAArD,CAAN;AACA,UAAMD,IAAI,GAAG,MAAMN,QAAQ,CAACO,YAAT,CAAsB,OAAtB,EAA+B,qBAA/B,EAAsD,QAAtD,CAAnB;AACAC,IAAAA,MAAM,CAACF,IAAI,CAACG,IAAN,CAAN,CAAkBE,IAAlB,CAAuB,yBAAvB;AACH,GAJC,CAAF,CAtBwB,CA4BxB;;AACAN,EAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAW;AACpD,UAAMQ,KAAK,GAAG,MAAMb,QAAQ,CAACO,YAAT,CAAsB,OAAtB,EAA+B,oBAA/B,EAAqD,QAArD,CAApB;AACA,UAAMK,KAAK,GAAG,MAAMZ,QAAQ,CAACO,YAAT,CAAsB,SAAtB,EAAiC,qBAAjC,EAAwD,QAAxD,CAApB;AACA,UAAMO,IAAI,GAAG,MAAMd,QAAQ,CAACe,SAAT,EAAnB;AACAF,IAAAA,KAAK,CAACJ,IAAN,CAAWO,SAAX,GAAuBF,IAAI,CAACL,IAAL,CAAU,CAAV,EAAaO,SAApC;AACAJ,IAAAA,KAAK,CAACH,IAAN,CAAWO,SAAX,GAAuBF,IAAI,CAACL,IAAL,CAAU,CAAV,EAAaO,SAApC;AACAH,IAAAA,KAAK,CAACJ,IAAN,CAAWQ,SAAX,GAAuBH,IAAI,CAACL,IAAL,CAAU,CAAV,EAAaQ,SAApC;AACAL,IAAAA,KAAK,CAACH,IAAN,CAAWQ,SAAX,GAAuBH,IAAI,CAACL,IAAL,CAAU,CAAV,EAAaQ,SAApC;AACAT,IAAAA,MAAM,CAACM,IAAI,CAACL,IAAN,CAAN,CAAkBS,aAAlB,CAAgC,CAACL,KAAK,CAACJ,IAAP,EAAaG,KAAK,CAACH,IAAnB,CAAhC;AACH,GATC,CAAF,CA7BwB,CAwCxB;;AACAJ,EAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAW;AAC9C,UAAMc,cAAc,GAAG,MAAMnB,QAAQ,CAACO,YAAT,CAAsB,OAAtB,EAA+B,oBAA/B,EAAqD,QAArD,CAA7B;AACA,UAAMD,IAAI,GAAG,MAAMN,QAAQ,CAACoB,OAAT,CAAiBD,cAAc,CAACV,IAAf,CAAoBY,OAArC,CAAnB;AACA,WAAOf,IAAI,CAACG,IAAL,CAAUQ,SAAjB;AACA,WAAOX,IAAI,CAACG,IAAL,CAAUO,SAAjB;AACAR,IAAAA,MAAM,CAACF,IAAI,CAACG,IAAN,CAAN,CAAkBS,aAAlB,CAAgC;AAC5BI,MAAAA,QAAQ,EAAE,OADkB;AACTZ,MAAAA,KAAK,EAAE,oBADE;AACoBa,MAAAA,QAAQ,EAAE,QAD9B;AACwCF,MAAAA,OAAO,EAAEF,cAAc,CAACV,IAAf,CAAoBY;AADrE,KAAhC;AAGH,GARC,CAAF;AAUAhB,EAAAA,EAAE,CAAC,4CAAD,EAA+C,YAAW;AACxD,UAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACoB,OAAT,CAAiB,CAAjB,CAAnB;AACAZ,IAAAA,MAAM,CAACF,IAAI,CAACG,IAAN,CAAN,CAAkBE,IAAlB,CAAuB,IAAvB;AACH,GAHC,CAAF,CAnDwB,CAuDxB;;AACAN,EAAAA,EAAE,CAAC,mCAAD,EAAsC,YAAW,CAElD,CAFC,CAAF;AAGH,CA3DO,CAAR","sourcesContent":["const apiCalls = require('../utils/apiCalls')\r\nconst truncate = require('../utils/truncate')\r\n\r\ndescribe(\"CRUD User\", () => {\r\n    beforeEach(async () => {\r\n        await truncate()\r\n    })\r\n\r\n    //### REGISTER USER ###\r\n    it(\"should create user\", async () => {\r\n        const user = await apiCalls.registerUser('Paulo', 'paulo@mesquita.dev', '123123')\r\n        expect(user.body.email).toBe(\"paulo@mesquita.dev\")\r\n    })\r\n\r\n    it(\"should report out of password problem\", async () => {\r\n        const user = await apiCalls.registerUser('Paulo', 'paulo@mesquita.dev')\r\n        expect(user.body).toBe(\"tbl_users.password cannot be null\")\r\n    })\r\n\r\n    it(\"should report email already exists\", async () => {\r\n        await apiCalls.registerUser('Paulo', 'paulo@mesquita.dev', '123123')\r\n        const user2 = await apiCalls.registerUser('PauloV', 'paulo@mesquita.dev', '123123')\r\n        expect(user2.body).toBe(\"email must be unique\")\r\n    })\r\n\r\n    it(\"should report username already exists\", async () => {\r\n        await apiCalls.registerUser('Paulo', 'paulo@mesquita.dev', '123123')\r\n        const user = await apiCalls.registerUser('Paulo', 'paulo@mesquita.devs', '123123')\r\n        expect(user.body).toBe(\"username must be unique\")\r\n    })\r\n\r\n    //### LIST USERS ###\r\n    it(\"should list users registered in the db\", async() => {\r\n        const user1 = await apiCalls.registerUser('Paulo', 'paulo@mesquita.dev', '123123')\r\n        const user2 = await apiCalls.registerUser('Paulo V', 'paulo@mesquita.devs', '123123')\r\n        const list = await apiCalls.listUsers()\r\n        user1.body.updatedAt = list.body[0].updatedAt\r\n        user2.body.updatedAt = list.body[1].updatedAt\r\n        user1.body.createdAt = list.body[0].createdAt\r\n        user2.body.createdAt = list.body[1].createdAt\r\n        expect(list.body).toStrictEqual([user1.body, user2.body])\r\n    })\r\n\r\n    //### GET USER ###\r\n    it(\"should get user registered in db\", async() => {\r\n        const userRegistered = await apiCalls.registerUser('Paulo', 'paulo@mesquita.dev', '123123')\r\n        const user = await apiCalls.getUser(userRegistered.body.id_user)\r\n        delete user.body.createdAt\r\n        delete user.body.updatedAt\r\n        expect(user.body).toStrictEqual({\r\n            username: 'Paulo', email: 'paulo@mesquita.dev', password: '123123', id_user: userRegistered.body.id_user\r\n        })\r\n    })\r\n\r\n    it(\"should report error not found with that id\", async() => {\r\n        const user = await apiCalls.getUser(1)\r\n        expect(user.body).toBe(null)\r\n    })\r\n    //### DELETE USER ###\r\n    it(\"should not be in db after deleted\", async() => {\r\n\r\n    })\r\n})"]}